{"name":"Genetic MusicSwarm","tagline":"A MusicSwarm genetic program created by Stephen Majercik, Frank Mauceri, and Ruben Martinez.","body":"Genetic MusicSwarm\r\n==========\r\nA project by Steve Majercik, Frank Mauceri, and Ruben Martinez\r\n\r\n**This is a swarm genetically programmed to evolve interesting behaviors. It \r\nhas two parts: the Music Swarm Java applet which serves as a visualizer for \r\nswarm behaviors, and the Web Swarm which is used to evaluate and evolve behaviors.**\r\n\r\nWeb Swarm\r\n----------\r\nThe **Web Swarm** is a Ruby on Rails application with a minimal user interface. \r\nThe UI is only used for creating accounts, logging in, and evaluating swarms.\r\nEach new user account causes the creation of 12 swarm behaviors. These \r\nbehaviors can be visualized by the **MusicSwarm** (which interacts with the \r\n**Web Swarm**'s JSON API), and evaluated on their visual appeal through the \r\nweb UI.\r\n\r\nOn the backend, the **Web Swarm** collects these evaluations, and when all 12 \r\ninitial swarms have been evaluated, it begins the process of evolving the next \r\ngeneration. To do this, the **Web Swarm** first puts the 12 behaviors \r\nthrough *Selection*. Specifically, they are put through a tournament select \r\nbased on their fitness (as evaluated per the user). The 6 behaviors that are \r\nchosen as best automatically survive to the next generation, and are also \r\nbrought to the next phase, *Crossover*. In *Crossover*, two behaviors at a \r\ntime are chosen to mate with each other and are both \"split\" at single points.\r\nParts of Behavior A end up in Behavior B, and vice-versa. From this process,\r\nanother 6 individuals arise for the next generation, resulting in a total of\r\n12 individuals once again. Finally, *mutation*. During *mutation*, each of a\r\nswarm's properties can be, with a low probability, be randomly replaced with \r\nsomething else. After *mutation*, the 12 new behaviors are assigned to the \r\nowner of the original 12, and the process repeats itself.\r\n\r\nMusicSwarm\r\n------\r\nThe **MusicSwarm** runs independently of the **Web Swarm**. It is a Java \r\napplet that serves to visualize swarm behaviors created by the **Web \r\nSwarm**. In order to visualize behaviors, first you must create an account \r\non the **Web Swarm** UI, run the Applet, and enter your **Web Swarm**\r\ncredentials when prompted by the Applet.A swarm behavior is then retrieved \r\nfrom the **Web Swarm**'s JSON API using the Java JSON Processing Library. \r\nThe behavior JSON is translated into a set of conditional statements that \r\naffect the way the swarm moves around by setting limits on its movements \r\nand controlling some of the swarm's properties.\r\n\r\nCurrent Limitations\r\n-------------\r\n- While the current genetic program's Crossover function is functional, it is\r\n\tlimited in that it cannot yet crossover sub-behaviors. That is, each swarm\r\n\tbehavior can have a set of subbehaviors, and these are currently transferred \r\n\tdirectly from parent to offspring, and are immune to Crossover and Mutation.\r\n\r\n- Every time you evaluate a behavior on the **Web Swarm** interface, you are\r\n\tpresented with the next behavior to evaluate. Currently, you must close and\r\n\tre-run the **MusicSwarm** after every evaluation in order to have it take \r\n\ton the next behavior's properties.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}